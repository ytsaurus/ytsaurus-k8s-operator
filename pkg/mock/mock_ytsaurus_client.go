// Code generated by MockGen. DO NOT EDIT.
// Source: go.ytsaurus.tech/yt/go/yt (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock_ytsaurus_client.go -package=mock_yt go.ytsaurus.tech/yt/go/yt Client
//

// Package mock_yt is a generated GoMock package.
package mock_yt

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	guid "go.ytsaurus.tech/yt/go/guid"
	ypath "go.ytsaurus.tech/yt/go/ypath"
	yt "go.ytsaurus.tech/yt/go/yt"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AbortOperation mocks base method.
func (m *MockClient) AbortOperation(ctx context.Context, opID yt.OperationID, options *yt.AbortOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortOperation indicates an expected call of AbortOperation.
func (mr *MockClientMockRecorder) AbortOperation(ctx, opID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortOperation", reflect.TypeOf((*MockClient)(nil).AbortOperation), ctx, opID, options)
}

// AbortQuery mocks base method.
func (m *MockClient) AbortQuery(ctx context.Context, id yt.QueryID, options *yt.AbortQueryOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortQuery", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortQuery indicates an expected call of AbortQuery.
func (mr *MockClientMockRecorder) AbortQuery(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortQuery", reflect.TypeOf((*MockClient)(nil).AbortQuery), ctx, id, options)
}

// AbortTx mocks base method.
func (m *MockClient) AbortTx(ctx context.Context, id yt.TxID, options *yt.AbortTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTx indicates an expected call of AbortTx.
func (mr *MockClientMockRecorder) AbortTx(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTx", reflect.TypeOf((*MockClient)(nil).AbortTx), ctx, id, options)
}

// AddMaintenance mocks base method.
func (m *MockClient) AddMaintenance(ctx context.Context, component yt.MaintenanceComponent, address string, maintenanceType yt.MaintenanceType, comment string, options *yt.AddMaintenanceOptions) (*yt.AddMaintenanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMaintenance", ctx, component, address, maintenanceType, comment, options)
	ret0, _ := ret[0].(*yt.AddMaintenanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMaintenance indicates an expected call of AddMaintenance.
func (mr *MockClientMockRecorder) AddMaintenance(ctx, component, address, maintenanceType, comment, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMaintenance", reflect.TypeOf((*MockClient)(nil).AddMaintenance), ctx, component, address, maintenanceType, comment, options)
}

// AddMember mocks base method.
func (m *MockClient) AddMember(ctx context.Context, group, member string, options *yt.AddMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, group, member, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockClientMockRecorder) AddMember(ctx, group, member, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockClient)(nil).AddMember), ctx, group, member, options)
}

// AlterQuery mocks base method.
func (m *MockClient) AlterQuery(ctx context.Context, id yt.QueryID, options *yt.AlterQueryOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterQuery", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterQuery indicates an expected call of AlterQuery.
func (mr *MockClientMockRecorder) AlterQuery(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterQuery", reflect.TypeOf((*MockClient)(nil).AlterQuery), ctx, id, options)
}

// AlterTable mocks base method.
func (m *MockClient) AlterTable(ctx context.Context, path ypath.Path, options *yt.AlterTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTable indicates an expected call of AlterTable.
func (mr *MockClientMockRecorder) AlterTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTable", reflect.TypeOf((*MockClient)(nil).AlterTable), ctx, path, options)
}

// AlterTableReplica mocks base method.
func (m *MockClient) AlterTableReplica(ctx context.Context, id yt.NodeID, options *yt.AlterTableReplicaOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTableReplica", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTableReplica indicates an expected call of AlterTableReplica.
func (mr *MockClientMockRecorder) AlterTableReplica(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTableReplica", reflect.TypeOf((*MockClient)(nil).AlterTableReplica), ctx, id, options)
}

// AttachTx mocks base method.
func (m *MockClient) AttachTx(ctx context.Context, txID yt.TxID, options *yt.AttachTxOptions) (yt.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTx", ctx, txID, options)
	ret0, _ := ret[0].(yt.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTx indicates an expected call of AttachTx.
func (mr *MockClientMockRecorder) AttachTx(ctx, txID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTx", reflect.TypeOf((*MockClient)(nil).AttachTx), ctx, txID, options)
}

// BeginTabletTx mocks base method.
func (m *MockClient) BeginTabletTx(ctx context.Context, options *yt.StartTabletTxOptions) (yt.TabletTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTabletTx", ctx, options)
	ret0, _ := ret[0].(yt.TabletTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTabletTx indicates an expected call of BeginTabletTx.
func (mr *MockClientMockRecorder) BeginTabletTx(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTabletTx", reflect.TypeOf((*MockClient)(nil).BeginTabletTx), ctx, options)
}

// BeginTx mocks base method.
func (m *MockClient) BeginTx(ctx context.Context, options *yt.StartTxOptions) (yt.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, options)
	ret0, _ := ret[0].(yt.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockClientMockRecorder) BeginTx(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockClient)(nil).BeginTx), ctx, options)
}

// BuildMasterSnapshots mocks base method.
func (m *MockClient) BuildMasterSnapshots(ctx context.Context, options *yt.BuildMasterSnapshotsOptions) (*[]yt.BuildMasterSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMasterSnapshots", ctx, options)
	ret0, _ := ret[0].(*[]yt.BuildMasterSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildMasterSnapshots indicates an expected call of BuildMasterSnapshots.
func (mr *MockClientMockRecorder) BuildMasterSnapshots(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMasterSnapshots", reflect.TypeOf((*MockClient)(nil).BuildMasterSnapshots), ctx, options)
}

// BuildSnapshot mocks base method.
func (m *MockClient) BuildSnapshot(ctx context.Context, options *yt.BuildSnapshotOptions) (*yt.BuildSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSnapshot", ctx, options)
	ret0, _ := ret[0].(*yt.BuildSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSnapshot indicates an expected call of BuildSnapshot.
func (mr *MockClientMockRecorder) BuildSnapshot(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockClient)(nil).BuildSnapshot), ctx, options)
}

// CheckPermission mocks base method.
func (m *MockClient) CheckPermission(ctx context.Context, user, permission string, path ypath.YPath, options *yt.CheckPermissionOptions) (*yt.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", ctx, user, permission, path, options)
	ret0, _ := ret[0].(*yt.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockClientMockRecorder) CheckPermission(ctx, user, permission, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockClient)(nil).CheckPermission), ctx, user, permission, path, options)
}

// CheckPermissionByACL mocks base method.
func (m *MockClient) CheckPermissionByACL(ctx context.Context, user, permission string, ACL []yt.ACE, options *yt.CheckPermissionByACLOptions) (*yt.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermissionByACL", ctx, user, permission, ACL, options)
	ret0, _ := ret[0].(*yt.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermissionByACL indicates an expected call of CheckPermissionByACL.
func (mr *MockClientMockRecorder) CheckPermissionByACL(ctx, user, permission, ACL, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermissionByACL", reflect.TypeOf((*MockClient)(nil).CheckPermissionByACL), ctx, user, permission, ACL, options)
}

// CommitTx mocks base method.
func (m *MockClient) CommitTx(ctx context.Context, id yt.TxID, options *yt.CommitTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockClientMockRecorder) CommitTx(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockClient)(nil).CommitTx), ctx, id, options)
}

// CompleteOperation mocks base method.
func (m *MockClient) CompleteOperation(ctx context.Context, opID yt.OperationID, options *yt.CompleteOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOperation indicates an expected call of CompleteOperation.
func (mr *MockClientMockRecorder) CompleteOperation(ctx, opID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOperation", reflect.TypeOf((*MockClient)(nil).CompleteOperation), ctx, opID, options)
}

// CopyNode mocks base method.
func (m *MockClient) CopyNode(ctx context.Context, src, dst ypath.YPath, options *yt.CopyNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyNode indicates an expected call of CopyNode.
func (mr *MockClientMockRecorder) CopyNode(ctx, src, dst, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyNode", reflect.TypeOf((*MockClient)(nil).CopyNode), ctx, src, dst, options)
}

// CreateNode mocks base method.
func (m *MockClient) CreateNode(ctx context.Context, path ypath.YPath, typ yt.NodeType, options *yt.CreateNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", ctx, path, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockClientMockRecorder) CreateNode(ctx, path, typ, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockClient)(nil).CreateNode), ctx, path, typ, options)
}

// CreateObject mocks base method.
func (m *MockClient) CreateObject(ctx context.Context, typ yt.NodeType, options *yt.CreateObjectOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx, typ, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockClientMockRecorder) CreateObject(ctx, typ, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockClient)(nil).CreateObject), ctx, typ, options)
}

// CreateQueueProducerSession mocks base method.
func (m *MockClient) CreateQueueProducerSession(ctx context.Context, producerPath, queuePath ypath.Path, sessionID string, options *yt.CreateQueueProducerSessionOptions) (*yt.CreateQueueProducerSessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueProducerSession", ctx, producerPath, queuePath, sessionID, options)
	ret0, _ := ret[0].(*yt.CreateQueueProducerSessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueueProducerSession indicates an expected call of CreateQueueProducerSession.
func (mr *MockClientMockRecorder) CreateQueueProducerSession(ctx, producerPath, queuePath, sessionID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueProducerSession", reflect.TypeOf((*MockClient)(nil).CreateQueueProducerSession), ctx, producerPath, queuePath, sessionID, options)
}

// CreateTableBackup mocks base method.
func (m *MockClient) CreateTableBackup(ctx context.Context, manifest yt.BackupManifest, options *yt.CreateTableBackupOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableBackup", ctx, manifest, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTableBackup indicates an expected call of CreateTableBackup.
func (mr *MockClientMockRecorder) CreateTableBackup(ctx, manifest, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableBackup", reflect.TypeOf((*MockClient)(nil).CreateTableBackup), ctx, manifest, options)
}

// DeleteRows mocks base method.
func (m *MockClient) DeleteRows(ctx context.Context, path ypath.Path, keys []any, options *yt.DeleteRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRows", ctx, path, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRows indicates an expected call of DeleteRows.
func (mr *MockClientMockRecorder) DeleteRows(ctx, path, keys, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRows", reflect.TypeOf((*MockClient)(nil).DeleteRows), ctx, path, keys, options)
}

// DestroyChunkLocations mocks base method.
func (m *MockClient) DestroyChunkLocations(ctx context.Context, nodeAddress string, recoverUnlinkedDisks bool, locationUUIDs []guid.GUID, options *yt.DestroyChunkLocationsOptions) (*yt.DestroyChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyChunkLocations", ctx, nodeAddress, recoverUnlinkedDisks, locationUUIDs, options)
	ret0, _ := ret[0].(*yt.DestroyChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyChunkLocations indicates an expected call of DestroyChunkLocations.
func (mr *MockClientMockRecorder) DestroyChunkLocations(ctx, nodeAddress, recoverUnlinkedDisks, locationUUIDs, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyChunkLocations", reflect.TypeOf((*MockClient)(nil).DestroyChunkLocations), ctx, nodeAddress, recoverUnlinkedDisks, locationUUIDs, options)
}

// DisableChunkLocations mocks base method.
func (m *MockClient) DisableChunkLocations(ctx context.Context, nodeAddress string, locationUUIDs []guid.GUID, options *yt.DisableChunkLocationsOptions) (*yt.DisableChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableChunkLocations", ctx, nodeAddress, locationUUIDs, options)
	ret0, _ := ret[0].(*yt.DisableChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableChunkLocations indicates an expected call of DisableChunkLocations.
func (mr *MockClientMockRecorder) DisableChunkLocations(ctx, nodeAddress, locationUUIDs, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableChunkLocations", reflect.TypeOf((*MockClient)(nil).DisableChunkLocations), ctx, nodeAddress, locationUUIDs, options)
}

// FreezeTable mocks base method.
func (m *MockClient) FreezeTable(ctx context.Context, path ypath.Path, options *yt.FreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreezeTable indicates an expected call of FreezeTable.
func (mr *MockClientMockRecorder) FreezeTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeTable", reflect.TypeOf((*MockClient)(nil).FreezeTable), ctx, path, options)
}

// GenerateTimestamp mocks base method.
func (m *MockClient) GenerateTimestamp(ctx context.Context, options *yt.GenerateTimestampOptions) (yt.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTimestamp", ctx, options)
	ret0, _ := ret[0].(yt.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTimestamp indicates an expected call of GenerateTimestamp.
func (mr *MockClientMockRecorder) GenerateTimestamp(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTimestamp", reflect.TypeOf((*MockClient)(nil).GenerateTimestamp), ctx, options)
}

// GetFileFromCache mocks base method.
func (m *MockClient) GetFileFromCache(ctx context.Context, md5 string, options *yt.GetFileFromCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromCache", ctx, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromCache indicates an expected call of GetFileFromCache.
func (mr *MockClientMockRecorder) GetFileFromCache(ctx, md5, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromCache", reflect.TypeOf((*MockClient)(nil).GetFileFromCache), ctx, md5, options)
}

// GetInSyncReplicas mocks base method.
func (m *MockClient) GetInSyncReplicas(ctx context.Context, path ypath.Path, ts yt.Timestamp, keys []any, options *yt.GetInSyncReplicasOptions) ([]yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInSyncReplicas", ctx, path, ts, keys, options)
	ret0, _ := ret[0].([]yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInSyncReplicas indicates an expected call of GetInSyncReplicas.
func (mr *MockClientMockRecorder) GetInSyncReplicas(ctx, path, ts, keys, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInSyncReplicas", reflect.TypeOf((*MockClient)(nil).GetInSyncReplicas), ctx, path, ts, keys, options)
}

// GetJobStderr mocks base method.
func (m *MockClient) GetJobStderr(ctx context.Context, opID yt.OperationID, jobID yt.JobID, options *yt.GetJobStderrOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStderr", ctx, opID, jobID, options)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStderr indicates an expected call of GetJobStderr.
func (mr *MockClientMockRecorder) GetJobStderr(ctx, opID, jobID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStderr", reflect.TypeOf((*MockClient)(nil).GetJobStderr), ctx, opID, jobID, options)
}

// GetNode mocks base method.
func (m *MockClient) GetNode(ctx context.Context, path ypath.YPath, result any, options *yt.GetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockClientMockRecorder) GetNode(ctx, path, result, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockClient)(nil).GetNode), ctx, path, result, options)
}

// GetOperation mocks base method.
func (m *MockClient) GetOperation(ctx context.Context, opID yt.OperationID, options *yt.GetOperationOptions) (*yt.OperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", ctx, opID, options)
	ret0, _ := ret[0].(*yt.OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockClientMockRecorder) GetOperation(ctx, opID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockClient)(nil).GetOperation), ctx, opID, options)
}

// GetOperationByAlias mocks base method.
func (m *MockClient) GetOperationByAlias(ctx context.Context, alias string, options *yt.GetOperationOptions) (*yt.OperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByAlias", ctx, alias, options)
	ret0, _ := ret[0].(*yt.OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByAlias indicates an expected call of GetOperationByAlias.
func (mr *MockClientMockRecorder) GetOperationByAlias(ctx, alias, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByAlias", reflect.TypeOf((*MockClient)(nil).GetOperationByAlias), ctx, alias, options)
}

// GetQuery mocks base method.
func (m *MockClient) GetQuery(ctx context.Context, id yt.QueryID, options *yt.GetQueryOptions) (*yt.Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", ctx, id, options)
	ret0, _ := ret[0].(*yt.Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockClientMockRecorder) GetQuery(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockClient)(nil).GetQuery), ctx, id, options)
}

// GetQueryResult mocks base method.
func (m *MockClient) GetQueryResult(ctx context.Context, id yt.QueryID, resultIndex int64, options *yt.GetQueryResultOptions) (*yt.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryResult", ctx, id, resultIndex, options)
	ret0, _ := ret[0].(*yt.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryResult indicates an expected call of GetQueryResult.
func (mr *MockClientMockRecorder) GetQueryResult(ctx, id, resultIndex, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResult", reflect.TypeOf((*MockClient)(nil).GetQueryResult), ctx, id, resultIndex, options)
}

// InsertRowBatch mocks base method.
func (m *MockClient) InsertRowBatch(ctx context.Context, path ypath.Path, rowBatch yt.RowBatch, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowBatch", ctx, path, rowBatch, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowBatch indicates an expected call of InsertRowBatch.
func (mr *MockClientMockRecorder) InsertRowBatch(ctx, path, rowBatch, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowBatch", reflect.TypeOf((*MockClient)(nil).InsertRowBatch), ctx, path, rowBatch, options)
}

// InsertRows mocks base method.
func (m *MockClient) InsertRows(ctx context.Context, path ypath.Path, rows []any, options *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRows", ctx, path, rows, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRows indicates an expected call of InsertRows.
func (mr *MockClientMockRecorder) InsertRows(ctx, path, rows, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRows", reflect.TypeOf((*MockClient)(nil).InsertRows), ctx, path, rows, options)
}

// IssueToken mocks base method.
func (m *MockClient) IssueToken(ctx context.Context, user, password string, options *yt.IssueTokenOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueToken", ctx, user, password, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueToken indicates an expected call of IssueToken.
func (mr *MockClientMockRecorder) IssueToken(ctx, user, password, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueToken", reflect.TypeOf((*MockClient)(nil).IssueToken), ctx, user, password, options)
}

// LinkNode mocks base method.
func (m *MockClient) LinkNode(ctx context.Context, target, link ypath.YPath, options *yt.LinkNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkNode", ctx, target, link, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkNode indicates an expected call of LinkNode.
func (mr *MockClientMockRecorder) LinkNode(ctx, target, link, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkNode", reflect.TypeOf((*MockClient)(nil).LinkNode), ctx, target, link, options)
}

// ListJobs mocks base method.
func (m *MockClient) ListJobs(ctx context.Context, opID yt.OperationID, options *yt.ListJobsOptions) (*yt.ListJobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx, opID, options)
	ret0, _ := ret[0].(*yt.ListJobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockClientMockRecorder) ListJobs(ctx, opID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockClient)(nil).ListJobs), ctx, opID, options)
}

// ListNode mocks base method.
func (m *MockClient) ListNode(ctx context.Context, path ypath.YPath, result any, options *yt.ListNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNode indicates an expected call of ListNode.
func (mr *MockClientMockRecorder) ListNode(ctx, path, result, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNode", reflect.TypeOf((*MockClient)(nil).ListNode), ctx, path, result, options)
}

// ListOperations mocks base method.
func (m *MockClient) ListOperations(ctx context.Context, options *yt.ListOperationsOptions) (*yt.ListOperationsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", ctx, options)
	ret0, _ := ret[0].(*yt.ListOperationsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockClientMockRecorder) ListOperations(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockClient)(nil).ListOperations), ctx, options)
}

// ListQueries mocks base method.
func (m *MockClient) ListQueries(ctx context.Context, options *yt.ListQueriesOptions) (*yt.ListQueriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueries", ctx, options)
	ret0, _ := ret[0].(*yt.ListQueriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueries indicates an expected call of ListQueries.
func (mr *MockClientMockRecorder) ListQueries(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueries", reflect.TypeOf((*MockClient)(nil).ListQueries), ctx, options)
}

// ListUserTokens mocks base method.
func (m *MockClient) ListUserTokens(ctx context.Context, user, password string, options *yt.ListUserTokensOptions) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserTokens", ctx, user, password, options)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserTokens indicates an expected call of ListUserTokens.
func (mr *MockClientMockRecorder) ListUserTokens(ctx, user, password, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserTokens", reflect.TypeOf((*MockClient)(nil).ListUserTokens), ctx, user, password, options)
}

// LocateSkynetShare mocks base method.
func (m *MockClient) LocateSkynetShare(ctx context.Context, path ypath.YPath, options *yt.LocateSkynetShareOptions) (yt.ShareLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocateSkynetShare", ctx, path, options)
	ret0, _ := ret[0].(yt.ShareLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocateSkynetShare indicates an expected call of LocateSkynetShare.
func (mr *MockClientMockRecorder) LocateSkynetShare(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocateSkynetShare", reflect.TypeOf((*MockClient)(nil).LocateSkynetShare), ctx, path, options)
}

// LockRows mocks base method.
func (m *MockClient) LockRows(ctx context.Context, path ypath.Path, locks []string, lockType yt.LockType, keys []any, options *yt.LockRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockRows", ctx, path, locks, lockType, keys, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockRows indicates an expected call of LockRows.
func (mr *MockClientMockRecorder) LockRows(ctx, path, locks, lockType, keys, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockRows", reflect.TypeOf((*MockClient)(nil).LockRows), ctx, path, locks, lockType, keys, options)
}

// LookupRows mocks base method.
func (m *MockClient) LookupRows(ctx context.Context, path ypath.Path, keys []any, options *yt.LookupRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupRows", ctx, path, keys, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupRows indicates an expected call of LookupRows.
func (mr *MockClientMockRecorder) LookupRows(ctx, path, keys, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupRows", reflect.TypeOf((*MockClient)(nil).LookupRows), ctx, path, keys, options)
}

// MountTable mocks base method.
func (m *MockClient) MountTable(ctx context.Context, path ypath.Path, options *yt.MountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountTable indicates an expected call of MountTable.
func (mr *MockClientMockRecorder) MountTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountTable", reflect.TypeOf((*MockClient)(nil).MountTable), ctx, path, options)
}

// MoveNode mocks base method.
func (m *MockClient) MoveNode(ctx context.Context, src, dst ypath.YPath, options *yt.MoveNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveNode", ctx, src, dst, options)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveNode indicates an expected call of MoveNode.
func (mr *MockClientMockRecorder) MoveNode(ctx, src, dst, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveNode", reflect.TypeOf((*MockClient)(nil).MoveNode), ctx, src, dst, options)
}

// MultisetAttributes mocks base method.
func (m *MockClient) MultisetAttributes(ctx context.Context, path ypath.YPath, attributes map[string]any, options *yt.MultisetAttributesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultisetAttributes", ctx, path, attributes, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultisetAttributes indicates an expected call of MultisetAttributes.
func (mr *MockClientMockRecorder) MultisetAttributes(ctx, path, attributes, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultisetAttributes", reflect.TypeOf((*MockClient)(nil).MultisetAttributes), ctx, path, attributes, options)
}

// NewRowBatchWriter mocks base method.
func (m *MockClient) NewRowBatchWriter() yt.RowBatchWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRowBatchWriter")
	ret0, _ := ret[0].(yt.RowBatchWriter)
	return ret0
}

// NewRowBatchWriter indicates an expected call of NewRowBatchWriter.
func (mr *MockClientMockRecorder) NewRowBatchWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRowBatchWriter", reflect.TypeOf((*MockClient)(nil).NewRowBatchWriter))
}

// NodeExists mocks base method.
func (m *MockClient) NodeExists(ctx context.Context, path ypath.YPath, options *yt.NodeExistsOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExists", ctx, path, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExists indicates an expected call of NodeExists.
func (mr *MockClientMockRecorder) NodeExists(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExists", reflect.TypeOf((*MockClient)(nil).NodeExists), ctx, path, options)
}

// PingTx mocks base method.
func (m *MockClient) PingTx(ctx context.Context, id yt.TxID, options *yt.PingTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingTx", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingTx indicates an expected call of PingTx.
func (mr *MockClientMockRecorder) PingTx(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingTx", reflect.TypeOf((*MockClient)(nil).PingTx), ctx, id, options)
}

// PushQueueProducer mocks base method.
func (m *MockClient) PushQueueProducer(ctx context.Context, producerPath, queuePath ypath.Path, sessionID string, epoch int64, rows []any, options *yt.PushQueueProducerOptions) (*yt.PushQueueProducerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushQueueProducer", ctx, producerPath, queuePath, sessionID, epoch, rows, options)
	ret0, _ := ret[0].(*yt.PushQueueProducerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushQueueProducer indicates an expected call of PushQueueProducer.
func (mr *MockClientMockRecorder) PushQueueProducer(ctx, producerPath, queuePath, sessionID, epoch, rows, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushQueueProducer", reflect.TypeOf((*MockClient)(nil).PushQueueProducer), ctx, producerPath, queuePath, sessionID, epoch, rows, options)
}

// PushQueueProducerBatch mocks base method.
func (m *MockClient) PushQueueProducerBatch(ctx context.Context, producerPath, queuePath ypath.Path, sessionID string, epoch int64, rowBatch yt.RowBatch, options *yt.PushQueueProducerOptions) (*yt.PushQueueProducerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushQueueProducerBatch", ctx, producerPath, queuePath, sessionID, epoch, rowBatch, options)
	ret0, _ := ret[0].(*yt.PushQueueProducerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushQueueProducerBatch indicates an expected call of PushQueueProducerBatch.
func (mr *MockClientMockRecorder) PushQueueProducerBatch(ctx, producerPath, queuePath, sessionID, epoch, rowBatch, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushQueueProducerBatch", reflect.TypeOf((*MockClient)(nil).PushQueueProducerBatch), ctx, producerPath, queuePath, sessionID, epoch, rowBatch, options)
}

// PutFileToCache mocks base method.
func (m *MockClient) PutFileToCache(ctx context.Context, path ypath.YPath, md5 string, options *yt.PutFileToCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileToCache", ctx, path, md5, options)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileToCache indicates an expected call of PutFileToCache.
func (mr *MockClientMockRecorder) PutFileToCache(ctx, path, md5, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileToCache", reflect.TypeOf((*MockClient)(nil).PutFileToCache), ctx, path, md5, options)
}

// ReadFile mocks base method.
func (m *MockClient) ReadFile(ctx context.Context, path ypath.YPath, options *yt.ReadFileOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, path, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockClientMockRecorder) ReadFile(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockClient)(nil).ReadFile), ctx, path, options)
}

// ReadQueryResult mocks base method.
func (m *MockClient) ReadQueryResult(ctx context.Context, id yt.QueryID, resultIndex int64, options *yt.ReadQueryResultOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadQueryResult", ctx, id, resultIndex, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadQueryResult indicates an expected call of ReadQueryResult.
func (mr *MockClientMockRecorder) ReadQueryResult(ctx, id, resultIndex, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadQueryResult", reflect.TypeOf((*MockClient)(nil).ReadQueryResult), ctx, id, resultIndex, options)
}

// ReadTable mocks base method.
func (m *MockClient) ReadTable(ctx context.Context, path ypath.YPath, options *yt.ReadTableOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTable indicates an expected call of ReadTable.
func (mr *MockClientMockRecorder) ReadTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTable", reflect.TypeOf((*MockClient)(nil).ReadTable), ctx, path, options)
}

// RemountTable mocks base method.
func (m *MockClient) RemountTable(ctx context.Context, path ypath.Path, options *yt.RemountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemountTable indicates an expected call of RemountTable.
func (mr *MockClientMockRecorder) RemountTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemountTable", reflect.TypeOf((*MockClient)(nil).RemountTable), ctx, path, options)
}

// RemoveMaintenance mocks base method.
func (m *MockClient) RemoveMaintenance(ctx context.Context, component yt.MaintenanceComponent, address string, options *yt.RemoveMaintenanceOptions) (*yt.RemoveMaintenanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMaintenance", ctx, component, address, options)
	ret0, _ := ret[0].(*yt.RemoveMaintenanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMaintenance indicates an expected call of RemoveMaintenance.
func (mr *MockClientMockRecorder) RemoveMaintenance(ctx, component, address, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMaintenance", reflect.TypeOf((*MockClient)(nil).RemoveMaintenance), ctx, component, address, options)
}

// RemoveMember mocks base method.
func (m *MockClient) RemoveMember(ctx context.Context, group, member string, options *yt.RemoveMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, group, member, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockClientMockRecorder) RemoveMember(ctx, group, member, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockClient)(nil).RemoveMember), ctx, group, member, options)
}

// RemoveNode mocks base method.
func (m *MockClient) RemoveNode(ctx context.Context, path ypath.YPath, options *yt.RemoveNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNode", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNode indicates an expected call of RemoveNode.
func (mr *MockClientMockRecorder) RemoveNode(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockClient)(nil).RemoveNode), ctx, path, options)
}

// RemoveQueueProducerSession mocks base method.
func (m *MockClient) RemoveQueueProducerSession(ctx context.Context, producerPath, queuePath ypath.Path, sessionID string, options *yt.RemoveQueueProducerSessionOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveQueueProducerSession", ctx, producerPath, queuePath, sessionID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveQueueProducerSession indicates an expected call of RemoveQueueProducerSession.
func (mr *MockClientMockRecorder) RemoveQueueProducerSession(ctx, producerPath, queuePath, sessionID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQueueProducerSession", reflect.TypeOf((*MockClient)(nil).RemoveQueueProducerSession), ctx, producerPath, queuePath, sessionID, options)
}

// RequestRestart mocks base method.
func (m *MockClient) RequestRestart(ctx context.Context, nodeAddress string, options *yt.RequestRestartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestRestart", ctx, nodeAddress, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestRestart indicates an expected call of RequestRestart.
func (mr *MockClientMockRecorder) RequestRestart(ctx, nodeAddress, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestRestart", reflect.TypeOf((*MockClient)(nil).RequestRestart), ctx, nodeAddress, options)
}

// ReshardTable mocks base method.
func (m *MockClient) ReshardTable(ctx context.Context, path ypath.Path, options *yt.ReshardTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReshardTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReshardTable indicates an expected call of ReshardTable.
func (mr *MockClientMockRecorder) ReshardTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReshardTable", reflect.TypeOf((*MockClient)(nil).ReshardTable), ctx, path, options)
}

// RestoreTableBackup mocks base method.
func (m *MockClient) RestoreTableBackup(ctx context.Context, manifest yt.BackupManifest, options *yt.RestoreTableBackupOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableBackup", ctx, manifest, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreTableBackup indicates an expected call of RestoreTableBackup.
func (mr *MockClientMockRecorder) RestoreTableBackup(ctx, manifest, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableBackup", reflect.TypeOf((*MockClient)(nil).RestoreTableBackup), ctx, manifest, options)
}

// ResumeOperation mocks base method.
func (m *MockClient) ResumeOperation(ctx context.Context, opID yt.OperationID, options *yt.ResumeOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeOperation indicates an expected call of ResumeOperation.
func (mr *MockClientMockRecorder) ResumeOperation(ctx, opID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeOperation", reflect.TypeOf((*MockClient)(nil).ResumeOperation), ctx, opID, options)
}

// ResurrectChunkLocations mocks base method.
func (m *MockClient) ResurrectChunkLocations(ctx context.Context, nodeAddress string, locationUUIDs []guid.GUID, options *yt.ResurrectChunkLocationsOptions) (*yt.ResurrectChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResurrectChunkLocations", ctx, nodeAddress, locationUUIDs, options)
	ret0, _ := ret[0].(*yt.ResurrectChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResurrectChunkLocations indicates an expected call of ResurrectChunkLocations.
func (mr *MockClientMockRecorder) ResurrectChunkLocations(ctx, nodeAddress, locationUUIDs, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResurrectChunkLocations", reflect.TypeOf((*MockClient)(nil).ResurrectChunkLocations), ctx, nodeAddress, locationUUIDs, options)
}

// RevokeToken mocks base method.
func (m *MockClient) RevokeToken(ctx context.Context, user, password, token string, options *yt.RevokeTokenOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", ctx, user, password, token, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockClientMockRecorder) RevokeToken(ctx, user, password, token, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockClient)(nil).RevokeToken), ctx, user, password, token, options)
}

// SelectRows mocks base method.
func (m *MockClient) SelectRows(ctx context.Context, query string, options *yt.SelectRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRows", ctx, query, options)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRows indicates an expected call of SelectRows.
func (mr *MockClientMockRecorder) SelectRows(ctx, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRows", reflect.TypeOf((*MockClient)(nil).SelectRows), ctx, query, options)
}

// SetNode mocks base method.
func (m *MockClient) SetNode(ctx context.Context, path ypath.YPath, value any, options *yt.SetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNode", ctx, path, value, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNode indicates an expected call of SetNode.
func (mr *MockClientMockRecorder) SetNode(ctx, path, value, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNode", reflect.TypeOf((*MockClient)(nil).SetNode), ctx, path, value, options)
}

// SetUserPassword mocks base method.
func (m *MockClient) SetUserPassword(ctx context.Context, user, newPassword, currentPassword string, options *yt.SetUserPasswordOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserPassword", ctx, user, newPassword, currentPassword, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserPassword indicates an expected call of SetUserPassword.
func (mr *MockClientMockRecorder) SetUserPassword(ctx, user, newPassword, currentPassword, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPassword", reflect.TypeOf((*MockClient)(nil).SetUserPassword), ctx, user, newPassword, currentPassword, options)
}

// StartOperation mocks base method.
func (m *MockClient) StartOperation(ctx context.Context, opType yt.OperationType, spec any, options *yt.StartOperationOptions) (yt.OperationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOperation", ctx, opType, spec, options)
	ret0, _ := ret[0].(yt.OperationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOperation indicates an expected call of StartOperation.
func (mr *MockClientMockRecorder) StartOperation(ctx, opType, spec, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOperation", reflect.TypeOf((*MockClient)(nil).StartOperation), ctx, opType, spec, options)
}

// StartQuery mocks base method.
func (m *MockClient) StartQuery(ctx context.Context, engine yt.QueryEngine, query string, options *yt.StartQueryOptions) (yt.QueryID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQuery", ctx, engine, query, options)
	ret0, _ := ret[0].(yt.QueryID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQuery indicates an expected call of StartQuery.
func (mr *MockClientMockRecorder) StartQuery(ctx, engine, query, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQuery", reflect.TypeOf((*MockClient)(nil).StartQuery), ctx, engine, query, options)
}

// StartTabletTx mocks base method.
func (m *MockClient) StartTabletTx(ctx context.Context, options *yt.StartTabletTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTabletTx", ctx, options)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTabletTx indicates an expected call of StartTabletTx.
func (mr *MockClientMockRecorder) StartTabletTx(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTabletTx", reflect.TypeOf((*MockClient)(nil).StartTabletTx), ctx, options)
}

// StartTx mocks base method.
func (m *MockClient) StartTx(ctx context.Context, options *yt.StartTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", ctx, options)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTx indicates an expected call of StartTx.
func (mr *MockClientMockRecorder) StartTx(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockClient)(nil).StartTx), ctx, options)
}

// Stop mocks base method.
func (m *MockClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}

// SuspendOperation mocks base method.
func (m *MockClient) SuspendOperation(ctx context.Context, opID yt.OperationID, options *yt.SuspendOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendOperation", ctx, opID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendOperation indicates an expected call of SuspendOperation.
func (mr *MockClientMockRecorder) SuspendOperation(ctx, opID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendOperation", reflect.TypeOf((*MockClient)(nil).SuspendOperation), ctx, opID, options)
}

// TransferAccountResources mocks base method.
func (m *MockClient) TransferAccountResources(ctx context.Context, srcAccount, dstAccount string, resourceDelta any, options *yt.TransferAccountResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferAccountResources", ctx, srcAccount, dstAccount, resourceDelta, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferAccountResources indicates an expected call of TransferAccountResources.
func (mr *MockClientMockRecorder) TransferAccountResources(ctx, srcAccount, dstAccount, resourceDelta, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAccountResources", reflect.TypeOf((*MockClient)(nil).TransferAccountResources), ctx, srcAccount, dstAccount, resourceDelta, options)
}

// TransferPoolResources mocks base method.
func (m *MockClient) TransferPoolResources(ctx context.Context, srcPool, dstPool, poolTree string, resourceDelta any, options *yt.TransferPoolResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferPoolResources", ctx, srcPool, dstPool, poolTree, resourceDelta, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferPoolResources indicates an expected call of TransferPoolResources.
func (mr *MockClientMockRecorder) TransferPoolResources(ctx, srcPool, dstPool, poolTree, resourceDelta, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferPoolResources", reflect.TypeOf((*MockClient)(nil).TransferPoolResources), ctx, srcPool, dstPool, poolTree, resourceDelta, options)
}

// UnfreezeTable mocks base method.
func (m *MockClient) UnfreezeTable(ctx context.Context, path ypath.Path, options *yt.UnfreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfreezeTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfreezeTable indicates an expected call of UnfreezeTable.
func (mr *MockClientMockRecorder) UnfreezeTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfreezeTable", reflect.TypeOf((*MockClient)(nil).UnfreezeTable), ctx, path, options)
}

// UnmountTable mocks base method.
func (m *MockClient) UnmountTable(ctx context.Context, path ypath.Path, options *yt.UnmountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountTable", ctx, path, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountTable indicates an expected call of UnmountTable.
func (mr *MockClientMockRecorder) UnmountTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountTable", reflect.TypeOf((*MockClient)(nil).UnmountTable), ctx, path, options)
}

// UpdateOperationParameters mocks base method.
func (m *MockClient) UpdateOperationParameters(ctx context.Context, opID yt.OperationID, params any, options *yt.UpdateOperationParametersOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationParameters", ctx, opID, params, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationParameters indicates an expected call of UpdateOperationParameters.
func (mr *MockClientMockRecorder) UpdateOperationParameters(ctx, opID, params, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationParameters", reflect.TypeOf((*MockClient)(nil).UpdateOperationParameters), ctx, opID, params, options)
}

// WhoAmI mocks base method.
func (m *MockClient) WhoAmI(ctx context.Context, options *yt.WhoAmIOptions) (*yt.WhoAmIResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", ctx, options)
	ret0, _ := ret[0].(*yt.WhoAmIResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockClientMockRecorder) WhoAmI(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockClient)(nil).WhoAmI), ctx, options)
}

// WriteFile mocks base method.
func (m *MockClient) WriteFile(ctx context.Context, path ypath.YPath, options *yt.WriteFileOptions) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, path, options)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockClientMockRecorder) WriteFile(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockClient)(nil).WriteFile), ctx, path, options)
}

// WriteTable mocks base method.
func (m *MockClient) WriteTable(ctx context.Context, path ypath.YPath, options *yt.WriteTableOptions) (yt.TableWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTable", ctx, path, options)
	ret0, _ := ret[0].(yt.TableWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTable indicates an expected call of WriteTable.
func (mr *MockClientMockRecorder) WriteTable(ctx, path, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTable", reflect.TypeOf((*MockClient)(nil).WriteTable), ctx, path, options)
}
